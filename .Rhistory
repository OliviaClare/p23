tmp <- simu.power.p23.parallel(nSim = 100000,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = 4,
seed = 23
)
as.numeric(NA>1)
0+NA
sum(NA>0)/20
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = 100000,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = 4,
seed = 23
)
sum(is.na(bd.zall))
o
tmp
targetEventsFA_all <- round(n_per_arm*2*maturity)
targetEventsIA_all <- round(targetEventsFA_all*IF_i)
file.path = paste0("Scenarios_IA30", "Seed", seedo, "date_2024-12-02", ".csv")
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
library(p23)
nCores = 20
detectCores()
parallel::detectCores()
nCores = 6
seedo = 123
nSims = 100000
n_per_arm = 200 # sample size for selected arm and control arm
method_comb <- c("Disjoint Subjects", "Independent Incremental", "Mixture")
method_mtadjust <- c("dunnett", "simes")
maturity <- 0.7
IF <- c(0.3, 0.4, 0.5, 0.7) # information rate
# Scenario 3 --------------------------------------------------------------------
method_dose_selection="ORR"
# n1_per_arm = seq(20, 30, 5)  # stage 1 sample size choices
n1_per_arm = 75 # updated sample size
cor_orros = 1 # correlation between ORR and OS
medOS_ctrl = c(30,5)
orr_trt = matrix(c(0.2, 0.2, 0.2, 0.2,
0.4, 0.4, 0.4, 0.4), nrow = 2, byrow = T)
targetEventsFA_all <- round(n_per_arm*2*maturity)
IF_i=0.3
targetEventsFA_all <- round(n_per_arm*2*maturity)
targetEventsIA_all <- round(targetEventsFA_all*IF_i)
file.path = paste0("Scenarios_IA30", "Seed", seedo, "date_2024-12-02", ".csv")
for(method_mtadjust_i in method_mtadjust)
for(medOS_ctrl_i in medOS_ctrl)
for (orr_i in 1)
for(method_i in method_comb){
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
# cum.pow.all = rbind(cum.pow.all, tmp$cum.pow)
# bd.z.all = rbind(bd.z.all, tmp$bd.z)
# gen.pow.all = rbind(gen.pow.all, tmp$generalized.pow)
# selection.all = rbind(selection.all, tmp$selection)
# re.all <- rbind(re.all, cbind(method_dose_selection, method_i, n1_per_arm,
#                               gen.pow.all, selection.all, bd.z.all, cum.pow.all))
# colnames(re.all)[4:12] = c("gen.pow.IA", "gen.pow.FA",
#                            "selection.dose1", "selection.dose2", "selection.dose3",
#                            "bd.z.IA", "bd.z.FA", "cum.pow.IA", "cum.pow.FA" )
new_row = matrix(c( medOS_ctrl_i, orr_i, cor_orros, method_dose_selection,
method_i, method_mtadjust_i, n1_per_arm,
tmp$cum.pow, tmp$bd.z, tmp$generalized.pow,
tmp$selection), nrow=1)
write.table(
new_row,
file = file.path,
append = TRUE,
sep = ",",
col.names = FALSE,  # Set to FALSE to avoid duplicating column names
row.names = FALSE
)
# save(re.all, file=paste0("Results/Scenario1_",method_dose_selection, method_i, "Seed", seedo, "date_", Sys.Date(), ".RData"))
}
?e1.ssr
?conduct.p23
?conduct.p23.ssr
?e1.ssr
e1.ssr(n1 = rep(50, 4), n2 = rep(200, 4), m = c(9,9, 15, 9),
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A1 = 12, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
enrollment.hold=4, targetEvents = 380)
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
method_comb[1]
tmp <- simu.power.p23.parallel(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1],
nCore = 6,
seed = 123
)
tmp
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23.parallel(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1],
nCore = 6,
seed = 1234
)
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
library(p23)
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
e1
comb.z
tmp
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
o = list()
o$s = s
o$dose.selection.endpoint=dose_selection_endpoint
o$method = "NA"
dat23 = data[data$group == 0 | data$group == s, ]
dat23k = f.dataCut(data=dat23, targetEvents=targetEvents2[K])
o$z = logrank.one.sided(time=dat23k$survTimeCut, cnsr=dat23k$cnsrCut, group=dat23k$group)$z
dat23k$survTimeCut
dat23 = data[data$group == 0 | data$group == s, ]
dat23k = f.dataCut(data=dat23, targetEvents=targetEvents2[K])
View(dat23k)
unique(dat23k$group)
View(dat23)
View(dat23k)
dat23k = f.dataCut(data=dat23, targetEvents=30)
View(dat23k)
targetEvents2[2]
dat23k = f.dataCut(data=dat23, targetEvents=300)
View(dat23k)
dat23k = f.dataCut(data=dat23, targetEvents=280)
View(dat23k)
dat23k = f.dataCut(data=dat23, targetEvents=targetEvents2[K])
View(dat23k)
K
dat23k = f.dataCut(data=dat23, targetEvents=targetEvents2[length(targetEvents2)])
o$z = logrank.one.sided(time=dat23k$survTimeCut, cnsr=dat23k$cnsrCut, group=dat23k$group)$z
o$actualEvents = targetEvents2
return(o)
o
?warning
warning(paste0("A total of", 2, "trials have no IA."))
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
which(is.na(rowSums(z)))
is.null(naro)
is.null(narows)
is.null(narows)
length(narows)
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
which(!is.na(rowSums(z)))
z[-which(is.na(rowSums(z)))[1],]
z[-which(!is.na(rowSums(z)))[1],]
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
tmp
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100000,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100000,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
warnings()
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
# target power: 0.9
# HR: 0.7
# no SSR
detach("package:p23")
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
tmp <- simu.power.p23(nSim = 100,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl_i,4),
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_comb[1]
)
