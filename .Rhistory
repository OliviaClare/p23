method = method_i,
nCore = nCores,
seed = seedo
)
# cum.pow.all = rbind(cum.pow.all, tmp$cum.pow)
# bd.z.all = rbind(bd.z.all, tmp$bd.z)
# gen.pow.all = rbind(gen.pow.all, tmp$generalized.pow)
# selection.all = rbind(selection.all, tmp$selection)
# re.all <- rbind(re.all, cbind(method_dose_selection, method_i, n1_per_arm,
#                               gen.pow.all, selection.all, bd.z.all, cum.pow.all))
# colnames(re.all)[4:12] = c("gen.pow.IA", "gen.pow.FA",
#                            "selection.dose1", "selection.dose2", "selection.dose3",
#                            "bd.z.IA", "bd.z.FA", "cum.pow.IA", "cum.pow.FA" )
new_row = matrix(c( orr_i, cor_orros, method_i, method_mtadjust_i, n1_per_arm,
tmp$cum.pow, tmp$bd.z, tmp$generalized.pow,
tmp$selection), nrow=1)
write.table(
new_row,
file = file.path,
append = TRUE,
sep = ",",
col.names = FALSE,  # Set to FALSE to avoid duplicating column names
row.names = FALSE
)
# save(re.all, file=paste0("Results/Scenario1_",method_dose_selection, method_i, "Seed", seedo, "date_", Sys.Date(), ".RData"))
}
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
detach('p23')
# Get the names of all loaded packages
loaded_packages <- names(sessionInfo()$otherPkgs)
detach_packages(loaded_packages)
# Function to detach loaded packages
detach_packages <- function(packages) {
for (package in packages) {
detach(paste0("package:", package), character.only = TRUE, unload = TRUE)
}
}
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
simu.power.p23.onecore(nSim=nsim_per_cluster,
n1 = n1, n2 = n2, m = m,
orr = orr, rho = rho, dose_selection_endpoint = dose_selection_endpoint,
Lambda1 = Lambda1, A1 = A1,
Lambda2 = Lambda2, A2 = A2,
enrollment.hold=enrollment.hold, DCO1 = DCO1, targetEvents2=targetEvents2,
alpha=alpha, sf=sf, multiplicity.method=multiplicity.method,
method = method)
simu.power.p23.onecore(nSim=nsim_per_cluster,
n1 = n1, n2 = n2, m = m,
orr = orr, rho = rho, dose_selection_endpoint = dose_selection_endpoint,
Lambda1 = Lambda1, A1 = A1,
Lambda2 = Lambda2, A2 = A2,
enrollment.hold=enrollment.hold, DCO1 = DCO1, targetEvents2=targetEvents2,
alpha=alpha, sf=sf, multiplicity.method=multiplicity.method,
method = method, seed=seedo)
tmp=simu.power.p23.onecore(nSim=nsim_per_cluster,
n1 = n1, n2 = n2, m = m,
orr = orr, rho = rho, dose_selection_endpoint = dose_selection_endpoint,
Lambda1 = Lambda1, A1 = A1,
Lambda2 = Lambda2, A2 = A2,
enrollment.hold=enrollment.hold, DCO1 = DCO1, targetEvents2=targetEvents2,
alpha=alpha, sf=sf, multiplicity.method=multiplicity.method,
method = method, seed=seedo)
tno
tmp
o
simu.power.p23(method="Mixture")
simu.power.p23(method="Mixture")
simu.power.p23(method="Mixture")
n1
n1*2*0.637
data %>%
arrange(calendarTime) %>%               # Sort by time
dplyr::filter(cnsr == 0, stage==1, group%in%c(s, K))
simu.power.p23(method="Mixture")
sel$s
K
K
# Get the names of all loaded packages
loaded_packages <- names(sessionInfo()$otherPkgs)
# Function to detach loaded packages
detach_packages <- function(packages) {
for (package in packages) {
detach(paste0("package:", package), character.only = TRUE, unload = TRUE)
}
}
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
?select.dose.p23
p23trial = simu.p23trial(n1 = rep(50, 4), n2 = rep(200, 4), m = c(9,9, 9, 9),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4)
select.dose.p23 (data=p23trial, DCO1=16, dose_selection_endpoint = "ORR")
#3. Dose selection
if (dose_selection_endpoint == "ORR"){
tmp = sort(orr.diff, index.return = TRUE)
} else {
tmp = sort(z1, index.return = TRUE)
}
?simu.power.p23
simu.power.p23(nSim=1000, n1 = rep(50, 4), n2 = rep(200, 4), m = c(9, 9, 12, 9),
orr = c(0.25, 0.3, 0.3, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A1 = 12,Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A2 = 12,enrollment.hold=4, DCO1 = 16, targetEvents2=c(300, 380), sf=gsDesign::sfLDOF,
alpha=0.025, multiplicity.method = "dunnett", method = "Disjoint Subjects")
tmp
n.arms
?sort
tmp = sort(orr.diff, index.return = TRUE)
tmp
tmp$ix[n.arms-1]
orr.diff
# Get the names of all loaded packages
loaded_packages <- names(sessionInfo()$otherPkgs)
# Function to detach loaded packages
detach_packages <- function(packages) {
for (package in packages) {
detach(paste0("package:", package), character.only = TRUE, unload = TRUE)
}
}
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
library(p23)
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
simu.power.p23(nSim=1000, n1 = rep(50, 4), n2 = rep(200, 4), m = c(9, 9, 12, 9),
orr = c(0.25, 0.3, 0.3, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A1 = 12,Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A2 = 12,enrollment.hold=4, DCO1 = 16, targetEvents2=c(300, 380), sf=gsDesign::sfLDOF,
alpha=0.025, multiplicity.method = "dunnett", method = "Disjoint Subjects")
simu.power.p23(nSim=1000, n1 = rep(50, 4), n2 = rep(200, 4), m = c(9, 9, 12, 9),
orr = c(0.25, 0.3, 0.3, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A1 = 12,Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A2 = 12,enrollment.hold=4, DCO1 = 16, targetEvents2=c(300, 380), sf=gsDesign::sfLDOF,
alpha=0.025, multiplicity.method = "dunnett", method = "Disjoint Subjects")
simu.power.p23(nSim=1000, n1 = rep(50, 4), n2 = rep(200, 4), m = c(9, 9, 12, 9),
orr = c(0.25, 0.3, 0.3, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A1 = 12,Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A2 = 12,enrollment.hold=4, DCO1 = 16, targetEvents2=c(300, 380), sf=gsDesign::sfLDOF,
alpha=0.025, multiplicity.method = "dunnett", method = "Disjoint Subjects")
# Function to detach loaded packages
detach_packages <- function(packages) {
for (package in packages) {
detach(paste0("package:", package), character.only = TRUE, unload = TRUE)
}
}
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
simu.power.p23(nSim=1000, n1 = rep(50, 4), n2 = rep(200, 4), m = c(9, 9, 12, 9),
orr = c(0.25, 0.3, 0.3, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A1 = 12,Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A2 = 12,enrollment.hold=4, DCO1 = 16, targetEvents2=c(300, 380), sf=gsDesign::sfLDOF,
alpha=0.025, multiplicity.method = "dunnett", method = "Disjoint Subjects")
sel$s
sel
tmp=data %>%
arrange(calendarTime) %>%               # Sort by time
dplyr::filter(cnsr == 0, stage==1, group%in%c(s-1, K))
View(tmp)
simu.power.p23(nSim=1000, n1 = rep(50, 4), n2 = rep(200, 4), m = c(9, 9, 12, 9),
orr = c(0.25, 0.3, 0.3, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A1 = 12,Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A2 = 12,enrollment.hold=4, DCO1 = 16, targetEvents2=c(300, 380), sf=gsDesign::sfLDOF,
alpha=0.025, multiplicity.method = "dunnett", method = "Disjoint Subjects")
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
nCores = 2
seedo = 123
nSims = 1000
n_per_arm = 200 # sample size for selected arm and control arm
method_comb <- c("Disjoint Subjects", "Independent Incremental", "Mixture")
method_mtadjust <- c("dunnett", "simes")
maturity <- 0.7
IF <- 0.3 # information rate
# Scenario 3 --------------------------------------------------------------------
method_dose_selection="ORR"
# n1_per_arm = seq(20, 30, 5)  # stage 1 sample size choices
n1_per_arm = 75 # updated sample size
cor_orros = 1 # correlation between ORR and OS
medOS_ctrl = 30
orr_trt = matrix(c(0.2, 0.2, 0.2, 0.2,
0.4, 0.4, 0.4, 0.4), nrow = 2, byrow = T)
targetEventsFA_all <- round(n_per_arm*2*maturity)
targetEventsIA_all <- round(targetEventsFA_all*IF)
file.path = paste0("Results/Scenario3_dunnett", "Seed", seedo, "date_2024-10-30", ".csv")
for(method_mtadjust_i in method_mtadjust)
for (orr_i in 1:2)
for(method_i in method_comb){
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
# cum.pow.all = rbind(cum.pow.all, tmp$cum.pow)
# bd.z.all = rbind(bd.z.all, tmp$bd.z)
# gen.pow.all = rbind(gen.pow.all, tmp$generalized.pow)
# selection.all = rbind(selection.all, tmp$selection)
# re.all <- rbind(re.all, cbind(method_dose_selection, method_i, n1_per_arm,
#                               gen.pow.all, selection.all, bd.z.all, cum.pow.all))
# colnames(re.all)[4:12] = c("gen.pow.IA", "gen.pow.FA",
#                            "selection.dose1", "selection.dose2", "selection.dose3",
#                            "bd.z.IA", "bd.z.FA", "cum.pow.IA", "cum.pow.FA" )
new_row = matrix(c( orr_i, cor_orros, method_i, method_mtadjust_i, n1_per_arm,
tmp$cum.pow, tmp$bd.z, tmp$generalized.pow,
tmp$selection), nrow=1)
write.table(
new_row,
file = file.path,
append = TRUE,
sep = ",",
col.names = FALSE,  # Set to FALSE to avoid duplicating column names
row.names = FALSE
)
# save(re.all, file=paste0("Results/Scenario1_",method_dose_selection, method_i, "Seed", seedo, "date_", Sys.Date(), ".RData"))
}
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
?gsd.power
gsd.power(z=c(1,1,1,1), bd.z = c(1,2,3,4))
z=matrix(1:20,ncol=2)
bd.z=matrix(rnorm(20), ncol=2)
ii=1
as.numeric(z[,ii] > bd.z[,ii])
tmp = 0
as.numeric(z[,ii] > bd.z[,ii])+tmp
sum(tmp > 0)
tmp = tmp + as.numeric(z[,ii] > bd.z[,ii])
sum(tmp > 0)
# Get the names of all loaded packages
loaded_packages <- names(sessionInfo()$otherPkgs)
# Function to detach loaded packages
detach_packages <- function(packages) {
for (package in packages) {
detach(paste0("package:", package), character.only = TRUE, unload = TRUE)
}
}
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
nCores = 2
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
cum.pow
tmp
# Detach all loaded packages
if (!is.null(loaded_packages)) {
detach_packages(loaded_packages)
}
nCores = 2
seedo = 123
nSims = 1000
n_per_arm = 200 # sample size for selected arm and control arm
method_comb <- c("Disjoint Subjects", "Independent Incremental", "Mixture")
method_mtadjust <- c("dunnett", "simes")
maturity <- 0.7
IF <- 0.3 # information rate
# Scenario 3 --------------------------------------------------------------------
method_dose_selection="ORR"
# n1_per_arm = seq(20, 30, 5)  # stage 1 sample size choices
n1_per_arm = 75 # updated sample size
cor_orros = 1 # correlation between ORR and OS
medOS_ctrl = 30
orr_trt = matrix(c(0.2, 0.2, 0.2, 0.2,
0.4, 0.4, 0.4, 0.4), nrow = 2, byrow = T)
targetEventsFA_all <- round(n_per_arm*2*maturity)
targetEventsIA_all <- round(targetEventsFA_all*IF)
file.path = paste0("Results/Scenario3_dunnett", "Seed", seedo, "date_2024-10-30", ".csv")
for(method_mtadjust_i in method_mtadjust)
for (orr_i in 1:2)
for(method_i in method_comb)
1
method_i
# re.all <- c()
# cum.pow.all <- bd.z.all <- gen.pow.all <- selection.all <- c()
tmp <- simu.power.p23.parallel(nSim = nSims,
n1=rep(n1_per_arm, 4),
n2=rep((n_per_arm-n1_per_arm), 2),
m = rep(medOS_ctrl,4),
rho = cor_orros,
orr = orr_trt[orr_i,],
dose_selection_endpoint = method_dose_selection,
# default lambda
A1 = 12, A2 = 8,
Lambda2 = function(t) {
(t/8) * as.numeric(t <= 8) + as.numeric(t > 8)
},
enrollment.hold = 0,
DCO1 = 12,
targetEvents2 = c(targetEventsIA_all, targetEventsFA_all),
multiplicity.method = method_mtadjust_i,
method = method_i,
nCore = nCores,
seed = seedo
)
tmp
