Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A = 12, drop=0, DCO = 16, targetEvents = NULL){
#(1) Survival and ORR data
z <- mvtnorm::rmvnorm(n=n, mean=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
z_surv <- z[,1]
z_orr <- z[,2]
lam <- log(2)/m
t <- -pnorm(q = z_surv, log.p = TRUE)/lam
response <- (z_orr <= qnorm(orr))+0
#(2) Drop Off data
############################
if (drop > 0) {W0 = rexp(n, rate=-log(1-drop))} else {W = rep(Inf, n)}
############################
#Censor data from Drop-off
############################
Y = apply(cbind(t, W), 1, min)
event = as.numeric(t < Inf)
event[W < t] = 0
#(3) Enrollment data
#Trick the program to generate a single arm data
nEachMonth = p23::f.nEachMonth(N=2*n, A=A, w=NULL, r=1, Lambda=Lambda)$n0
############################
#EnterTime, CalendarTime
############################
enterTime = rep(NA, n)
enterTime[1:nEachMonth[1]] = runif(nEachMonth[1], min=0, max=1)
if (A > 1){for (j in 2:A){
LL = sum(nEachMonth[1:(j-1)])+1
UU = sum(nEachMonth[1:j])
enterTime[LL:UU] = runif(nEachMonth[j]) + j - 1
}}
survTime = as.numeric(Y)
#trick infinity
survTime[survTime > 1e6] = 1e6
calendarTime = as.numeric(enterTime) + as.numeric(survTime)
cnsr = 1-event
dati = data.frame(cbind(enterTime, calendarTime, survTime, cnsr, response))
############################
#(4) Cut data
############################
L = ifelse(!is.null(DCO), length(DCO), length(targetEvents))
dat.cut = NULL
for (ii in 1:L){
dat.cut[[ii]] = f.dataCut(data=dati, targetEvents=targetEvents[ii], DCO = DCO[ii])
}
return(dat.cut)
}
dat=simu.single.arm.hz(n = 100, m = 10, orr = 0.2, Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A = 12, drop=0, DCO = 16, targetEvents = NULL)
View(dat)
View(dat)
View(dat[[1]])
View(dat[[1]])
View(dat[[1]])
View(dat[[1]])
gg <- c(0.2, 0.1, 0.15)
tmp = sort(gg, index.return = TRUE)
tmp
tmp$ix[3]
simu.ph23.hz <- function(nSim=1000, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9, 11, 13, 8),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
DCO1 = 16, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4, targetEvents2 = c(300, 380), method = "Independent Incremental",
extended.followup=FALSE){
if (method == "Independent Incremental"){
######################
#Stage 1
######################
n.arms = length(n1)
z1 = e1 = matrix(NA, nrow=nSim, ncol=n.arms-1)
orr.diff = matrix(NA, nrow=nSim, ncol=n.arms-1)
#e1: total number of events for by DCO1 for each dose arm + control
s = rep(NA, nSim) #selected dose level
z.c = matrix(NA, nrow=nSim, ncol=length(targetEvents2)) #z value at each of Stage 2 analyses using combined data
z2  = matrix(NA, nrow=nSim, ncol=length(targetEvents2)) # incremental z value from stage 2 compared to Stage 1
w = matrix(NA, nrow=nSim, ncol=length(targetEvents2)) #weights as sqrt(information fraction) = sqrt(events at dose selection / events at each stage 2 analysis) at each analysis.
for (i in 1:nSim){
dat1 = list(NULL) #control arm is the last one
#1. simulate Stage 1 survival data
for (j in 1:n.arms){
dat1[[j]] = simu.single.arm.hz(n=n1[j], m=m[j], orr = orr[j], rho = rho, Lambda=Lambda1, A=A1, drop=0, DCO=DCO1)[[1]]
dat1[[j]]$group = j
if (j == n.arms){dat1[[j]]$group = 0}
}
#2. Calculate z statistics and e
orr.control <- mean(dat1[[n.arms]]$response)
for (j in 1:(n.arms-1)){
datj = rbind(dat1[[j]], dat1[[n.arms]])
z1[i, j] = logrank.one.sided(time=datj$survTimeCut, cnsr=datj$cnsrCut, group=datj$group)$z
e1[i, j] = sum(1-datj$cnsrCut)
orr.diff[i, j] = mean(dat1[[j]]$response) - orr.control
}
#3. Dose selection
if(dose_selection_endpoint == "ORR"){
tmp = sort(orr.diff[i,], index.return = TRUE)
s[i] = tmp$ix[n.arms-1]
}else{
tmp = sort(z1[i,], index.return = TRUE)
s[i] = tmp$ix[n.arms-1]
}
#cbind(z1, s)
######################
#Stage 2
######################
#After decision is made in Stage 1 for dose selection, then enroll Stage 2 patients.
#If there is enrollment hold
#4. simulate Stage 2 data (control and selected dose s)
dat20 = simu.single.arm.hz(n=n2[2], m=m[n.arms], orr = orr[n.arms], rho = rho, Lambda=Lambda2, A=A2, drop=0, DCO=Inf)[[1]]
dat2s = simu.single.arm.hz(n=n2[1], m=m[s[i]], orr = orr[s[i]], rho = rho, Lambda=Lambda2, A=A2, drop=0, DCO=Inf)[[1]]
dat20$group=0; dat2s$group = s[i]
#5. Enrollment gap
dat2a = rbind(dat20, dat2s)
dat2a$enrollment.hold = enrollment.hold
#Rename variables
dat2b <- subset(dat2a, select = -c(calendarCutoff, survTimeCut, cnsrCut))
dat2c = dplyr::rename(dat2b,
enterTime.original ="enterTime",
calendarTime.original ="calendarTime")
dat2c$enterTime = dat2c$enterTime.original + enrollment.hold + A1
dat2c$calendarTime = dat2c$enterTime + dat2c$survTime
#6. Combine Stage 1 and Stage 2 data
dat.s = rbind(dat1[[s[i]]], dat1[[n.arms]])
dat.s = subset(dat.s, select = -c(calendarCutoff, survTimeCut, cnsrCut))
dat.s$stage = 1 #flag this is stage 2 data
dat2d = as.data.frame(cbind(dat2c$enterTime, dat2c$calendarTime, dat2c$survTime, dat2c$cnsr, dat2c$group))
dat2d = dplyr::rename(dat2d,
enterTime ="V1",
calendarTime ="V2",
survTime="V3",
cnsr="V4",
group="V5")
dat2d$stage = 2 #flag this is stage 2 data
dat.comb0 = rbind(dat.s, dat2d)
#7. Data cut according to K analyses in stage 2
K = length(targetEvents2) #K analyses in Stage 2
for (ii in 1:K){
dat.comb = f.dataCut(data=dat.comb0, targetEvents=targetEvents2[ii])
#Calculate z statistics for logrank test combining Stage 1 and stage 2
z.c[i, ii] = logrank.one.sided(time=dat.comb$survTimeCut, cnsr=dat.comb$cnsrCut, group=dat.comb$group)$z
frac = e1[i, s[i]]/targetEvents2[ii]
z2[i, ii] = (z.c[i, ii] - sqrt(frac)*z1[i, s[i]])/sqrt(1-frac)
w[i, ii] = sqrt(frac)
}
}
} else if (method == "Disjoint Subjects"){
}
o=list()
o$z1 = z1
o$z2 = z2
o$z.c = z.c
o$w = w
o$selected.dose = s
o$example.data = dat.comb
o$orr.diff = orr.diff
return(o)
}
bd.z = actualBounds(planned.events=c(300, 380), act.events=c(300, 380), sf=gsDesign::sfLDOF, alpha=0.025)$actual.z
o = simu.ph23.hz(nSim=10000, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9,9, 9, 9),
?mvnfast::rmvn
simu.single.arm.hz <- function(n = 100, m = 10, orr = 0.2, rho = 0.7,
Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A = 12, drop=0, DCO = 16, targetEvents = NULL){
#(1) Survival and ORR data
#z <- mvtnorm::rmvnorm(n=n, mean=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
z <- mvnfast::rmvn(n=n, mu=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
z_surv <- z[,1]
z_orr <- z[,2]
lam <- log(2)/m
t <- -pnorm(q = z_surv, log.p = TRUE)/lam
response <- (z_orr <= qnorm(orr))+0
#(2) Drop Off data
############################
if (drop > 0) {W0 = rexp(n, rate=-log(1-drop))} else {W = rep(Inf, n)}
############################
#Censor data from Drop-off
############################
Y = apply(cbind(t, W), 1, min)
event = as.numeric(t < Inf)
event[W < t] = 0
#(3) Enrollment data
#Trick the program to generate a single arm data
nEachMonth = p23::f.nEachMonth(N=2*n, A=A, w=NULL, r=1, Lambda=Lambda)$n0
############################
#EnterTime, CalendarTime
############################
enterTime = rep(NA, n)
enterTime[1:nEachMonth[1]] = runif(nEachMonth[1], min=0, max=1)
if (A > 1){for (j in 2:A){
LL = sum(nEachMonth[1:(j-1)])+1
UU = sum(nEachMonth[1:j])
enterTime[LL:UU] = runif(nEachMonth[j]) + j - 1
}}
survTime = as.numeric(Y)
#trick infinity
survTime[survTime > 1e6] = 1e6
calendarTime = as.numeric(enterTime) + as.numeric(survTime)
cnsr = 1-event
dati = data.frame(cbind(enterTime, calendarTime, survTime, cnsr, response))
############################
#(4) Cut data
############################
L = ifelse(!is.null(DCO), length(DCO), length(targetEvents))
dat.cut = NULL
for (ii in 1:L){
dat.cut[[ii]] = f.dataCut(data=dati, targetEvents=targetEvents[ii], DCO = DCO[ii])
}
return(dat.cut)
}
dat=simu.single.arm.hz(n = 10000, m = 10, orr = 0.2, Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A = 12, drop=0, DCO = 16, targetEvents = NULL)
dat=simu.single.arm.hz(n = 100000, m = 10, orr = 0.2, Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A = 12, drop=0, DCO = 16, targetEvents = NULL)
simu.single.arm.hz <- function(n = 100, m = 10, orr = 0.2, rho = 0.7,
Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A = 12, drop=0, DCO = 16, targetEvents = NULL){
#(1) Survival and ORR data
z <- mvtnorm::rmvnorm(n=n, mean=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
#z <- mvnfast::rmvn(n=n, mu=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
z_surv <- z[,1]
z_orr <- z[,2]
lam <- log(2)/m
t <- -pnorm(q = z_surv, log.p = TRUE)/lam
response <- (z_orr <= qnorm(orr))+0
#(2) Drop Off data
############################
if (drop > 0) {W0 = rexp(n, rate=-log(1-drop))} else {W = rep(Inf, n)}
############################
#Censor data from Drop-off
############################
Y = apply(cbind(t, W), 1, min)
event = as.numeric(t < Inf)
event[W < t] = 0
#(3) Enrollment data
#Trick the program to generate a single arm data
nEachMonth = p23::f.nEachMonth(N=2*n, A=A, w=NULL, r=1, Lambda=Lambda)$n0
############################
#EnterTime, CalendarTime
############################
enterTime = rep(NA, n)
enterTime[1:nEachMonth[1]] = runif(nEachMonth[1], min=0, max=1)
if (A > 1){for (j in 2:A){
LL = sum(nEachMonth[1:(j-1)])+1
UU = sum(nEachMonth[1:j])
enterTime[LL:UU] = runif(nEachMonth[j]) + j - 1
}}
survTime = as.numeric(Y)
#trick infinity
survTime[survTime > 1e6] = 1e6
calendarTime = as.numeric(enterTime) + as.numeric(survTime)
cnsr = 1-event
dati = data.frame(cbind(enterTime, calendarTime, survTime, cnsr, response))
############################
#(4) Cut data
############################
L = ifelse(!is.null(DCO), length(DCO), length(targetEvents))
dat.cut = NULL
for (ii in 1:L){
dat.cut[[ii]] = f.dataCut(data=dati, targetEvents=targetEvents[ii], DCO = DCO[ii])
}
return(dat.cut)
}
dat=simu.single.arm.hz(n = 100000, m = 10, orr = 0.2, Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A = 12, drop=0, DCO = 16, targetEvents = NULL)
dat=simu.single.arm.hz(n = 1000000, m = 10, orr = 0.2, Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A = 12, drop=0, DCO = 16, targetEvents = NULL)
simu.single.arm.hz <- function(n = 100, m = 10, orr = 0.2, rho = 0.7,
Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A = 12, drop=0, DCO = 16, targetEvents = NULL){
#(1) Survival and ORR data
#z <- mvtnorm::rmvnorm(n=n, mean=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
z <- mvnfast::rmvn(n=n, mu=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
z_surv <- z[,1]
z_orr <- z[,2]
lam <- log(2)/m
t <- -pnorm(q = z_surv, log.p = TRUE)/lam
response <- (z_orr <= qnorm(orr))+0
#(2) Drop Off data
############################
if (drop > 0) {W0 = rexp(n, rate=-log(1-drop))} else {W = rep(Inf, n)}
############################
#Censor data from Drop-off
############################
Y = apply(cbind(t, W), 1, min)
event = as.numeric(t < Inf)
event[W < t] = 0
#(3) Enrollment data
#Trick the program to generate a single arm data
nEachMonth = p23::f.nEachMonth(N=2*n, A=A, w=NULL, r=1, Lambda=Lambda)$n0
############################
#EnterTime, CalendarTime
############################
enterTime = rep(NA, n)
enterTime[1:nEachMonth[1]] = runif(nEachMonth[1], min=0, max=1)
if (A > 1){for (j in 2:A){
LL = sum(nEachMonth[1:(j-1)])+1
UU = sum(nEachMonth[1:j])
enterTime[LL:UU] = runif(nEachMonth[j]) + j - 1
}}
survTime = as.numeric(Y)
#trick infinity
survTime[survTime > 1e6] = 1e6
calendarTime = as.numeric(enterTime) + as.numeric(survTime)
cnsr = 1-event
dati = data.frame(cbind(enterTime, calendarTime, survTime, cnsr, response))
############################
#(4) Cut data
############################
L = ifelse(!is.null(DCO), length(DCO), length(targetEvents))
dat.cut = NULL
for (ii in 1:L){
dat.cut[[ii]] = f.dataCut(data=dati, targetEvents=targetEvents[ii], DCO = DCO[ii])
}
return(dat.cut)
}
dat=simu.single.arm.hz(n = 1000000, m = 10, orr = 0.2, Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A = 12, drop=0, DCO = 16, targetEvents = NULL)
simu.single.arm.hz <- function(n = 100, m = 10, orr = 0.2, rho = 0.7,
Lambda = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)},
A = 12, drop=0, DCO = 16, targetEvents = NULL){
#(1) Survival and ORR data
z <- mvtnorm::rmvnorm(n=n, mean=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
#z <- mvnfast::rmvn(n=n, mu=c(0,0), sigma=matrix(c(1, rho, rho, 1), 2, 2))
z_surv <- z[,1]
z_orr <- z[,2]
lam <- log(2)/m
t <- -pnorm(q = z_surv, log.p = TRUE)/lam
response <- (z_orr <= qnorm(orr))+0
#(2) Drop Off data
############################
if (drop > 0) {W0 = rexp(n, rate=-log(1-drop))} else {W = rep(Inf, n)}
############################
#Censor data from Drop-off
############################
Y = apply(cbind(t, W), 1, min)
event = as.numeric(t < Inf)
event[W < t] = 0
#(3) Enrollment data
#Trick the program to generate a single arm data
nEachMonth = p23::f.nEachMonth(N=2*n, A=A, w=NULL, r=1, Lambda=Lambda)$n0
############################
#EnterTime, CalendarTime
############################
enterTime = rep(NA, n)
enterTime[1:nEachMonth[1]] = runif(nEachMonth[1], min=0, max=1)
if (A > 1){for (j in 2:A){
LL = sum(nEachMonth[1:(j-1)])+1
UU = sum(nEachMonth[1:j])
enterTime[LL:UU] = runif(nEachMonth[j]) + j - 1
}}
survTime = as.numeric(Y)
#trick infinity
survTime[survTime > 1e6] = 1e6
calendarTime = as.numeric(enterTime) + as.numeric(survTime)
cnsr = 1-event
dati = data.frame(cbind(enterTime, calendarTime, survTime, cnsr, response))
############################
#(4) Cut data
############################
L = ifelse(!is.null(DCO), length(DCO), length(targetEvents))
dat.cut = NULL
for (ii in 1:L){
dat.cut[[ii]] = f.dataCut(data=dati, targetEvents=targetEvents[ii], DCO = DCO[ii])
}
return(dat.cut)
}
o = simu.ph23.hz(nSim=100, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9,9, 9, 9),
o = simu.ph23.hz(nSim=100, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9,9, 9, 9),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
DCO1 = 16, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4, targetEvents2 = c(300, 380))
#'
simu.ph23.hz <- function(nSim=1000, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9, 11, 13, 8),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
DCO1 = 16, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4, targetEvents2 = c(300, 380), method = "Independent Incremental",
extended.followup=FALSE){
if (method == "Independent Incremental"){
######################
#Stage 1
######################
n.arms = length(n1)
z1 = e1 = matrix(NA, nrow=nSim, ncol=n.arms-1)
orr.diff = matrix(NA, nrow=nSim, ncol=n.arms-1)
#e1: total number of events for by DCO1 for each dose arm + control
s = rep(NA, nSim) #selected dose level
z.c = matrix(NA, nrow=nSim, ncol=length(targetEvents2)) #z value at each of Stage 2 analyses using combined data
z2  = matrix(NA, nrow=nSim, ncol=length(targetEvents2)) # incremental z value from stage 2 compared to Stage 1
w = matrix(NA, nrow=nSim, ncol=length(targetEvents2)) #weights as sqrt(information fraction) = sqrt(events at dose selection / events at each stage 2 analysis) at each analysis.
for (i in 1:nSim){
dat1 = list(NULL) #control arm is the last one
#1. simulate Stage 1 survival data
for (j in 1:n.arms){
dat1[[j]] = simu.single.arm.hz(n=n1[j], m=m[j], orr = orr[j], rho = rho, Lambda=Lambda1, A=A1, drop=0, DCO=DCO1)[[1]]
dat1[[j]]$group = j
if (j == n.arms){dat1[[j]]$group = 0}
}
#2. Calculate z statistics and e
orr.control <- mean(dat1[[n.arms]]$response)
for (j in 1:(n.arms-1)){
datj = rbind(dat1[[j]], dat1[[n.arms]])
z1[i, j] = logrank.one.sided(time=datj$survTimeCut, cnsr=datj$cnsrCut, group=datj$group)$z
e1[i, j] = sum(1-datj$cnsrCut)
orr.diff[i, j] = mean(dat1[[j]]$response) - orr.control
}
#3. Dose selection
if(dose_selection_endpoint == "ORR"){
tmp = sort(orr.diff[i,], index.return = TRUE)
s[i] = tmp$ix[n.arms-1]
}else{
tmp = sort(z1[i,], index.return = TRUE)
s[i] = tmp$ix[n.arms-1]
}
#cbind(z1, s)
######################
#Stage 2
######################
#After decision is made in Stage 1 for dose selection, then enroll Stage 2 patients.
#If there is enrollment hold
#4. simulate Stage 2 data (control and selected dose s)
dat20 = simu.single.arm.hz(n=n2[2], m=m[n.arms], orr = orr[n.arms], rho = rho, Lambda=Lambda2, A=A2, drop=0, DCO=Inf)[[1]]
dat2s = simu.single.arm.hz(n=n2[1], m=m[s[i]], orr = orr[s[i]], rho = rho, Lambda=Lambda2, A=A2, drop=0, DCO=Inf)[[1]]
dat20$group=0; dat2s$group = s[i]
#5. Enrollment gap
dat2a = rbind(dat20, dat2s)
dat2a$enrollment.hold = enrollment.hold
#Rename variables
dat2b <- subset(dat2a, select = -c(calendarCutoff, survTimeCut, cnsrCut))
dat2c = dplyr::rename(dat2b,
enterTime.original ="enterTime",
calendarTime.original ="calendarTime")
dat2c$enterTime = dat2c$enterTime.original + enrollment.hold + A1
dat2c$calendarTime = dat2c$enterTime + dat2c$survTime
#6. Combine Stage 1 and Stage 2 data
dat.s = rbind(dat1[[s[i]]], dat1[[n.arms]])
dat.s = subset(dat.s, select = -c(calendarCutoff, survTimeCut, cnsrCut))
dat.s$stage = 1 #flag this is stage 2 data
dat2d = as.data.frame(cbind(dat2c$enterTime, dat2c$calendarTime, dat2c$survTime, dat2c$cnsr, dat2c$response, dat2c$group))
dat2d = dplyr::rename(dat2d,
enterTime ="V1",
calendarTime ="V2",
survTime="V3",
cnsr="V4",
response="V5",
group="V6")
dat2d$stage = 2 #flag this is stage 2 data
dat.comb0 = rbind(dat.s, dat2d)
#7. Data cut according to K analyses in stage 2
K = length(targetEvents2) #K analyses in Stage 2
for (ii in 1:K){
dat.comb = f.dataCut(data=dat.comb0, targetEvents=targetEvents2[ii])
#Calculate z statistics for logrank test combining Stage 1 and stage 2
z.c[i, ii] = logrank.one.sided(time=dat.comb$survTimeCut, cnsr=dat.comb$cnsrCut, group=dat.comb$group)$z
frac = e1[i, s[i]]/targetEvents2[ii]
z2[i, ii] = (z.c[i, ii] - sqrt(frac)*z1[i, s[i]])/sqrt(1-frac)
w[i, ii] = sqrt(frac)
}
}
} else if (method == "Disjoint Subjects"){
}
o=list()
o$z1 = z1
o$z2 = z2
o$z.c = z.c
o$w = w
o$selected.dose = s
o$example.data = dat.comb
o$orr.diff = orr.diff
return(o)
}
o = simu.ph23.hz(nSim=100, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9,9, 9, 9),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
DCO1 = 16, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4, targetEvents2 = c(300, 380))
gg<-o$example.data
View(gg)
o = simu.ph23.hz(nSim=10000, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9,9, 9, 9),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 0.7, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
DCO1 = 16, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4, targetEvents2 = c(300, 380))
IA = ph23.comb.p(z1=o$z1,  z2 = o$z2[,1], bd.z=bd.z[1], w=o$w[,1])
FA = ph23.comb.p(z1=o$z1,  z2 = o$z2[,2], bd.z=bd.z[2], w=o$w[,2])
gsd.power(z = cbind(IA$comb.z, FA$comb.z), bd.z=bd.z)
o = simu.ph23.hz(nSim=1000, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9,9, 9, 9),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 1, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
DCO1 = 16, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4, targetEvents2 = c(300, 380))
IA = ph23.comb.p(z1=o$z1,  z2 = o$z2[,1], bd.z=bd.z[1], w=o$w[,1])
FA = ph23.comb.p(z1=o$z1,  z2 = o$z2[,2], bd.z=bd.z[2], w=o$w[,2])
gsd.power(z = cbind(IA$comb.z, FA$comb.z), bd.z=bd.z)
set.seed(1234)
o = simu.ph23.hz(nSim=1000, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9,9, 9, 9),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 1, dose_selection_endpoint = "ORR",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
DCO1 = 16, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4, targetEvents2 = c(300, 380))
IA = ph23.comb.p(z1=o$z1,  z2 = o$z2[,1], bd.z=bd.z[1], w=o$w[,1])
FA = ph23.comb.p(z1=o$z1,  z2 = o$z2[,2], bd.z=bd.z[2], w=o$w[,2])
#power calculation using the standard group sequential boundaries
gsd.power(z = cbind(IA$comb.z, FA$comb.z), bd.z=bd.z)
set.seed(1234)
o = simu.ph23.hz(nSim=1000, n1 = c(50, 50, 50, 50), n2 = c(200, 200), m = c(9,9, 9, 9),
orr = c(0.25, 0.3, 0.4, 0.2), rho = 1, dose_selection_endpoint = "OS",
Lambda1 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A1 = 12,
DCO1 = 16, Lambda2 = function(t){(t/12)*as.numeric(t<= 12) + as.numeric(t > 12)}, A2 = 12,
enrollment.hold=4, targetEvents2 = c(300, 380))
IA = ph23.comb.p(z1=o$z1,  z2 = o$z2[,1], bd.z=bd.z[1], w=o$w[,1])
FA = ph23.comb.p(z1=o$z1,  z2 = o$z2[,2], bd.z=bd.z[2], w=o$w[,2])
#power calculation using the standard group sequential boundaries
gsd.power(z = cbind(IA$comb.z, FA$comb.z), bd.z=bd.z)
library(p23)
library(p23)
library(p23)
